/**
 * IDMEF Package for JAVA
 *
 * @author Mattia Zago - dev [at] zagomattia [dot] it
 * @version 0.0.1
 * @since 14/09/2017
 * 
 * License Notice
 * 
 *   This file is subject to the terms and conditions defined in
 *   file 'LICENSE.txt', which is part of this source code package.
 * 
 * Copyright Notice
 *
 *   Edits and bug-fixes:
 *     Copyright (c) 2017 Mattia Zago. All rights reserved.
 *
 *   Auto-generated files:
 *     This file was generated by the JavaTM Architecture for XML Binding(JAXB)
 *     Reference Implementation, v2.2.8-b130911.1802 
 *     See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
 *
 *   IDMEF Schema:
 *     Copyright (c) 2008 IETF Trust and the persons identified as the
 *     IDMEF document authors.  All rights reserved.
 *     See https://tools.ietf.org/html/bcp78 for the complete license 
 *     document.
 */

package org.iana.idmef;

import java.io.Serializable;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.function.Function;
import java.util.function.Predicate;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for IDMEF-Message complex type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="IDMEF-Message">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;choice maxOccurs="unbounded">
 *         &lt;element ref="{http://iana.org/idmef}Alert"/>
 *         &lt;element ref="{http://iana.org/idmef}Heartbeat"/>
 *       &lt;/choice>
 *       &lt;attribute name="version" type="{http://www.w3.org/2001/XMLSchema}decimal" fixed="1.0" />
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "IDMEF-Message", propOrder = {
    "alertOrHeartbeat"
})
public class IDMEFMessage implements Serializable {

    /**
     * Generated Serial Version UID.
     */
    private static final long serialVersionUID = 5456227500668830881L;
    @XmlElements({
        @XmlElement(name = "Alert", type = Alert.class),
        @XmlElement(name = "Heartbeat", type = Heartbeat.class)
    })
    protected List<Object> alertOrHeartbeat;
    @XmlAttribute(name = "version")
    protected BigDecimal version;

    /**
     * Gets the value of the alertOrHeartbeat property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the alertOrHeartbeat property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getAlertOrHeartbeat().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Alert }
     * {@link Heartbeat }
     * 
     * 
     */
    public List<Object> getAlertOrHeartbeat() {
        if (alertOrHeartbeat == null) {
            alertOrHeartbeat = new ArrayList<Object>();
        }
        return this.alertOrHeartbeat;
    }

    /**
     * Gets the value of the version property.
     * 
     * @return
     *     possible object is
     *     {@link BigDecimal }
     *     
     */
    public BigDecimal getVersion() {
        if (version == null) {
            return new BigDecimal("1.0");
        } else {
            return version;
        }
    }

    /**
     * Sets the value of the version property.
     * 
     * @param value
     *     allowed object is
     *     {@link BigDecimal }
     *     
     */
    public void setVersion(BigDecimal value) {
        this.version = value;
    }

    /**
     * Retrieve the list of Alerts contained in this message.
     * @return List of alerts
     */
    public List<Alert> getAlerts() {
        List<Alert> result = new LinkedList<>();
        for(Object record : this.getAlertOrHeartbeat()) {
            if (record instanceof Alert) {
                result.add((Alert)record);
            }
        }
        return result;
    }
    
    /**
     * Retrieve the list of Heartbeat contained in this message.
     * @return List of heartbeats
     */
    public List<Heartbeat> getHeartbeat() {
        List<Heartbeat> result = new LinkedList<>();
        for(Object record : this.getAlertOrHeartbeat()) {
            if (record instanceof Heartbeat) {
                result.add((Heartbeat)record);
            }
        }
        return result;
    }
    
    /**
     * 
     * @param keyExtractor
     * @return
     */
    public static <T extends Alert> Predicate<T> distinctByKey(Function<? super T, ?> keyExtractor) {
        Map<Object,Boolean> seen = new ConcurrentHashMap<>();
        return t -> seen.putIfAbsent(keyExtractor.apply(t), Boolean.TRUE) == null;
    }
}
