/**
 * IDMEF Package for JAVA
 * 
 * License Notice
 * 
 * This file is subject to the terms and conditions defined in
 * file 'LICENSE.txt', which is part of this source code package.
 * 
 * Copyright Notice
 *
 * Edits and bug-fixes:
 * Copyright (c) 2017 Mattia Zago. All rights reserved.
 *
 * Auto-generated files:
 * This file was generated by the JavaTM Architecture for XML Binding(JAXB)
 * Reference Implementation, v2.2.8-b130911.1802
 * See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a>
 *
 * IDMEF Schema:
 * Copyright (c) 2008 IETF Trust and the persons identified as the
 * IDMEF document authors. All rights reserved.
 * See https://tools.ietf.org/html/bcp78 for the complete license
 * document.
 *
 * @author Mattia Zago - dev [at] zagomattia [dot] it
 * @version 0.0.1
 * @since 14/09/2017
 */

package org.iana.idmef;

import java.io.Serializable;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for address-category.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within
 * this class.
 * 
 * <pre>
 * &lt;simpleType name="address-category"&gt;
 *
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token"&gt;
 *
 *     &lt;enumeration value="unknown"/&gt;
 *     &lt;enumeration value="atm"/&gt;
 *     &lt;enumeration value="e-mail"/&gt;
 *     &lt;enumeration value="lotus-notes"/&gt;
 *     &lt;enumeration value="mac"/&gt;
 *     &lt;enumeration value="sna"/&gt;
 *     &lt;enumeration value="vm"/&gt;
 *     &lt;enumeration value="ipv4-addr"/&gt;
 *     &lt;enumeration value="ipv4-addr-hex"/&gt;
 *     &lt;enumeration value="ipv4-net"/&gt;
 *     &lt;enumeration value="ipv4-net-mask"/&gt;
 *     &lt;enumeration value="ipv6-addr"/&gt;
 *     &lt;enumeration value="ipv6-addr-hex"/&gt;
 *     &lt;enumeration value="ipv6-net"/&gt;
 *     &lt;enumeration value="ipv6-net-mask"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "address-category")
@XmlEnum
public enum AddressCategory implements Serializable {
    
    @XmlEnumValue("unknown")
    UNKNOWN("unknown"), @XmlEnumValue("atm")
    ATM("atm"), @XmlEnumValue("e-mail")
    E_MAIL("e-mail"), @XmlEnumValue("lotus-notes")
    LOTUS_NOTES("lotus-notes"), @XmlEnumValue("mac")
    MAC("mac"), @XmlEnumValue("sna")
    SNA("sna"), @XmlEnumValue("vm")
    VM("vm"), @XmlEnumValue("ipv4-addr")
    IPV_4_ADDR("ipv4-addr"), @XmlEnumValue("ipv4-addr-hex")
    IPV_4_ADDR_HEX("ipv4-addr-hex"), @XmlEnumValue("ipv4-net")
    IPV_4_NET("ipv4-net"), @XmlEnumValue("ipv4-net-mask")
    IPV_4_NET_MASK("ipv4-net-mask"), @XmlEnumValue("ipv6-addr")
    IPV_6_ADDR("ipv6-addr"), @XmlEnumValue("ipv6-addr-hex")
    IPV_6_ADDR_HEX("ipv6-addr-hex"), @XmlEnumValue("ipv6-net")
    IPV_6_NET("ipv6-net"), @XmlEnumValue("ipv6-net-mask")
    IPV_6_NET_MASK("ipv6-net-mask");
    private final String value;
    
    AddressCategory(String v) {
        value = v;
    }
    
    public String value() {
        return value;
    }
    
    public static AddressCategory fromValue(String v) {
        for (AddressCategory c : AddressCategory.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }
    
}
