/**
 * IDMEF Package for JAVA
 *
 * @author Mattia Zago - dev [at] zagomattia [dot] it
 * @version 0.0.1
 * @since 14/09/2017
 * 
 * License Notice
 * 
 *   This file is subject to the terms and conditions defined in
 *   file 'LICENSE.txt', which is part of this source code package.
 * 
 * Copyright Notice
 *
 *   Edits and bug-fixes:
 *     Copyright (c) 2017 Mattia Zago. All rights reserved.
 *
 *   Auto-generated files:
 *     This file was generated by the JavaTM Architecture for XML Binding(JAXB)
 *     Reference Implementation, v2.2.8-b130911.1802 
 *     See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
 *
 *   IDMEF Schema:
 *     Copyright (c) 2008 IETF Trust and the persons identified as the
 *     IDMEF document authors.  All rights reserved.
 *     See https://tools.ietf.org/html/bcp78 for the complete license 
 *     document.
 */

package org.iana.idmef;

import java.io.Serializable;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for additionaldata-type.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="additionaldata-type">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="boolean"/>
 *     &lt;enumeration value="byte"/>
 *     &lt;enumeration value="character"/>
 *     &lt;enumeration value="date-time"/>
 *     &lt;enumeration value="integer"/>
 *     &lt;enumeration value="ntpstamp"/>
 *     &lt;enumeration value="portlist"/>
 *     &lt;enumeration value="real"/>
 *     &lt;enumeration value="string"/>
 *     &lt;enumeration value="byte-string"/>
 *     &lt;enumeration value="xml"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "additionaldata-type")
@XmlEnum
public enum AdditionaldataType implements Serializable {

    @XmlEnumValue("boolean")
    BOOLEAN("boolean"),
    @XmlEnumValue("byte")
    BYTE("byte"),
    @XmlEnumValue("character")
    CHARACTER("character"),
    @XmlEnumValue("date-time")
    DATE_TIME("date-time"),
    @XmlEnumValue("integer")
    INTEGER("integer"),
    @XmlEnumValue("ntpstamp")
    NTPSTAMP("ntpstamp"),
    @XmlEnumValue("portlist")
    PORTLIST("portlist"),
    @XmlEnumValue("real")
    REAL("real"),
    @XmlEnumValue("string")
    STRING("string"),
    @XmlEnumValue("byte-string")
    BYTE_STRING("byte-string"),
    @XmlEnumValue("xml")
    XML("xml");
    private final String value;

    AdditionaldataType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static AdditionaldataType fromValue(String v) {
        for (AdditionaldataType c: AdditionaldataType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
